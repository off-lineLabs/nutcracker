package com.offlinelabs.nutcracker.data.import

/**
 * Manages ID mappings during import to handle foreign key relationships
 * Maps old IDs from the import file to new IDs generated by the database
 */
class IdMappingManager {
    private val idMappings = mutableMapOf<String, MutableMap<String, Long>>()
    
    /**
     * Add an ID mapping for a specific table
     * @param tableName The name of the table
     * @param oldId The original ID from the import file
     * @param newId The new ID generated by the database
     */
    fun addMapping(tableName: String, oldId: String, newId: Long) {
        if (!idMappings.containsKey(tableName)) {
            idMappings[tableName] = mutableMapOf()
        }
        idMappings[tableName]!![oldId] = newId
    }
    
    /**
     * Get the new ID for a given old ID in a specific table
     * @param tableName The name of the table
     * @param oldId The original ID from the import file
     * @return The new ID, or null if no mapping exists
     */
    fun getNewId(tableName: String, oldId: String): Long? {
        return idMappings[tableName]?.get(oldId)
    }
    
    /**
     * Get the new ID for a given old ID in a specific table, with fallback
     * @param tableName The name of the table
     * @param oldId The original ID from the import file
     * @param fallback The fallback value if no mapping exists
     * @return The new ID or the fallback value
     */
    fun getNewIdOrFallback(tableName: String, oldId: String, fallback: Long): Long {
        return getNewId(tableName, oldId) ?: fallback
    }
    
    /**
     * Check if a mapping exists for a given table and old ID
     * @param tableName The name of the table
     * @param oldId The original ID from the import file
     * @return True if a mapping exists, false otherwise
     */
    fun hasMapping(tableName: String, oldId: String): Boolean {
        return idMappings[tableName]?.containsKey(oldId) == true
    }
    
    /**
     * Get all mappings for a specific table
     * @param tableName The name of the table
     * @return Map of old ID to new ID for the table
     */
    fun getMappingsForTable(tableName: String): Map<String, Long> {
        return idMappings[tableName] ?: emptyMap()
    }
    
    /**
     * Get all mappings across all tables
     * @return Map of table name to ID mappings
     */
    fun getAllMappings(): Map<String, Map<String, Long>> {
        return idMappings.mapValues { it.value.toMap() }
    }
    
    /**
     * Clear all mappings
     */
    fun clear() {
        idMappings.clear()
    }
    
    /**
     * Get the number of mappings for a specific table
     * @param tableName The name of the table
     * @return The number of mappings
     */
    fun getMappingCount(tableName: String): Int {
        return idMappings[tableName]?.size ?: 0
    }
    
    /**
     * Get the total number of mappings across all tables
     * @return The total number of mappings
     */
    fun getTotalMappingCount(): Int {
        return idMappings.values.sumOf { it.size }
    }
}
